USE AdventureWorks2019
GO

ALTER PROCEDURE ETL_TransactionData
AS
BEGIN

	WHILE 1 = 1
	BEGIN
		-- Update existing transactions
		UPDATE J$SRC_TXN 
		SET CONSUME_F = 1 
		WHERE CONSUME_F = 0;

		SELECT * FROM SRC_TXN;
		SELECT * FROM J$SRC_TXN;
		SELECT * FROM TXN;
		SELECT * FROM TXN_EXCP;
		WAITFOR DELAY '00:00:15';

		-- Handle exceptions
		INSERT INTO TXN_EXCP (TXN_SRC_KEY, EXCP_CODE_ID)
		SELECT
			j.TXN_SRC_KEY,
			(SELECT EXCP_CODE_ID FROM EXCP_CODE WHERE EXCP_CODE_NM = 'ACEXCP') AS EXCP_CODE_ID
		FROM J$SRC_TXN j
		LEFT JOIN SRC_TXN s ON j.TXN_SRC_KEY = s.TXN_SRC_KEY
		LEFT JOIN AC_LKP a ON s.AC_NUM = a.AC_NUM AND a.ACTV_F = 'Y'
		WHERE a.AC_ID IS NULL;

		SELECT * FROM SRC_TXN;
		SELECT * FROM J$SRC_TXN;
		SELECT * FROM TXN;
		SELECT * FROM TXN_EXCP;
		WAITFOR DELAY '00:00:15';

		INSERT INTO TXN_EXCP (TXN_SRC_KEY, EXCP_CODE_ID)
		SELECT
			j.TXN_SRC_KEY,
			(SELECT EXCP_CODE_ID FROM EXCP_CODE WHERE EXCP_CODE_NM = 'PDEXCP') AS EXCP_CODE_ID
		FROM J$SRC_TXN j
		LEFT JOIN SRC_TXN s ON j.TXN_SRC_KEY = s.TXN_SRC_KEY
		LEFT JOIN PD_LKP p ON s.PD_NUM = p.PD_NUM AND s.BUS_DY BETWEEN p.EFF_DT AND p.END_DATE
		WHERE p.PD_ID IS NULL;

		SELECT * FROM SRC_TXN;
		SELECT * FROM J$SRC_TXN;
		SELECT * FROM TXN;
		SELECT * FROM TXN_EXCP;
		WAITFOR DELAY '00:00:15';

		-- Update, insert or delete transactions in TXN table
		MERGE INTO TXN AS Target
		USING (
			SELECT
				s.TXN_SRC_KEY,
				a.AC_ID,
				p.PD_ID,
				(SELECT SRC_STM_ID FROM SRC_STM_LKP WHERE SRC_STM_CODE = s.SRC_CODE) AS SRC_STM_ID,
				s.SHARES AS QTY,
				s.CCY,
				dbo.calculate_amount(s.TXN_SRC_KEY) AS AMOUNT,
				s.BUS_DY AS TD,
				COALESCE(s.BKG_DT, s.BUS_DY) AS BKG_DT
			FROM SRC_TXN s
			LEFT JOIN AC_LKP a ON s.AC_NUM = a.AC_NUM AND a.ACTV_F = 'Y'
			LEFT JOIN PD_LKP p ON s.PD_NUM = p.PD_NUM AND s.BUS_DY BETWEEN p.EFF_DT AND p.END_DATE
			WHERE a.AC_ID IS NOT NULL AND p.PD_ID IS NOT NULL
		) AS Source
		ON Target.TXN_SRC_KEY = Source.TXN_SRC_KEY
		WHEN MATCHED THEN
			UPDATE SET
				AC_ID = Source.AC_ID,
				PD_ID = Source.PD_ID,
				SRC_STM_ID = Source.SRC_STM_ID,
				QTY = Source.QTY,
				CCY = Source.CCY,
				AMOUNT = Source.AMOUNT,
				TD = Source.TD,
				BKG_DT = Source.BKG_DT
		WHEN NOT MATCHED BY TARGET THEN
			INSERT (TXN_SRC_KEY, AC_ID, PD_ID, SRC_STM_ID, QTY, CCY, AMOUNT, TD, BKG_DT)
			VALUES (Source.TXN_SRC_KEY, Source.AC_ID, Source.PD_ID, Source.SRC_STM_ID, Source.QTY, Source.CCY, Source.AMOUNT, Source.TD, Source.BKG_DT)
		WHEN NOT MATCHED BY SOURCE THEN
			DELETE;

		SELECT * FROM SRC_TXN;
		SELECT * FROM J$SRC_TXN;
		SELECT * FROM TXN;
		SELECT * FROM TXN_EXCP;
		WAITFOR DELAY '00:00:15';

		-- Delete consumed transactions from J$SRC_TXN
		DELETE FROM J$SRC_TXN 
		WHERE CONSUME_F = 1;

		SELECT * FROM SRC_TXN;
		SELECT * FROM J$SRC_TXN;
		SELECT * FROM TXN;
		SELECT * FROM TXN_EXCP;
		WAITFOR DELAY '00:00:15';

	END
END
GO